macro(MY_LINK_FRAMEWORKS app_name fnames)
    foreach(ENTRY ${fnames})
        unset(AFRAMEWORK CACHE)
        find_library(AFRAMEWORK ${ENTRY})
        target_link_libraries(${app_name} ${AFRAMEWORK})
    endforeach()
endmacro()

macro(MY_FIND_PJPROJECT)
    find_package(PkgConfig REQUIRED)
    if(NOT ${PKG_CONFIG_FOUND}) 
        message(FATAL_ERROR "pkg-config not found!")
    endif()

    set(ENV{PKG_CONFIG_PATH} "${PROJECT_SOURCE_DIR}/../libs/${MYARCH}/lib/pkgconfig")
    pkg_search_module(PJPROJECT REQUIRED NO_CMAKE_PATH pjproject libpjproject)
    if(NOT ${PJPROJECT_FOUND})
        message(FATAL_ERROR "pjproject is not found!")
    endif()
    message(STATUS "pjproject location:" ${PJPROJECT_INCLUDE_DIRS} ${PJPROJECT_CFLAGS})
endmacro()

macro(MY_FIND_JSON_C)
    find_package(PkgConfig REQUIRED)
    if(NOT ${PKG_CONFIG_FOUND}) 
        message(FATAL_ERROR "pkg-config not found!")
    endif()

    set(ENV{PKG_CONFIG_PATH} "${PROJECT_SOURCE_DIR}/../libs/${MYARCH}/lib/pkgconfig")
    pkg_search_module(JSON_C REQUIRED NO_CMAKE_PATH json-c)
    if(NOT ${JSON_C_FOUND})
        message(FATAL_ERROR "json-c is not found!")
    endif()
    message(STATUS "json-c location:" ${JSON_C_INCLUDE_DIRS})
endmacro()

macro(MY_TARGET_LINK_PJPROJECT app_name)
    if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
        set(FRAMEWORKS CoreAudio CoreServices AudioUnit AudioToolbox Foundation AppKit QTKit QuartzCore OpenGL)

        foreach(ENTRY ${PJPROJECT_LIBRARY_DIRS})
            target_link_libraries(${app_name} -L${ENTRY})
        endforeach()

        target_link_libraries(${app_name} ${PJPROJECT_LIBRARIES} )
        my_link_frameworks(${app_name} "${FRAMEWORKS}")
    else()
        target_link_libraries(${app_name} ${PJPROJECT_LDFLAGS})
    endif()
endmacro()
